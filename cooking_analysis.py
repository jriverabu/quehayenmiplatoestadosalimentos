# cooking_analysis.py
import streamlit as st
import re
import json
from PIL import Image
from google.generativeai.types import ChatMessage, MessageRole, TextBlock, ImageBlock

def analyze_cooking_status(temp_filename, gemini_pro):
    """
    Analiza el estado de cocci√≥n de alimentos en una imagen.
    
    Args:
        temp_filename: Ruta al archivo de imagen temporal
        gemini_pro: Instancia del modelo Gemini Pro
    
    Returns:
        None (muestra resultados directamente en la interfaz de Streamlit)
    """
    st.subheader("An√°lisis del Estado del Alimento")
    
    # A√±adir opci√≥n para detectar si el alimento est√° crudo
    cooking_status = st.checkbox("Detectar nivel de cocci√≥n del alimento", value=True,
                               help="Determina si el alimento est√° crudo, parcialmente cocinado o totalmente cocinado")
    
    with st.spinner("Analizando estado del alimento..."):
        st.info("Procesando imagen para evaluar el estado y calidad del alimento...")
        
        # Implementar an√°lisis real del estado con Gemini
        try:
            # Modificar el mensaje para incluir an√°lisis de cocci√≥n si est√° activado
            prompt_text = """Analiza esta imagen de comida y eval√∫a el estado y calidad de cada alimento visible.
            Para cada alimento:
            1. Identifica su nombre
            2. Eval√∫a su estado (Excelente, Bueno, Regular o Deteriorado)
            3. Describe brevemente los detalles visuales que indican su estado
            4. Proporciona recomendaciones sobre su consumo
            """
            
            # A√±adir instrucciones para detectar nivel de cocci√≥n si est√° activado
            if cooking_status:
                prompt_text += """
            5. Determina el nivel de cocci√≥n (Crudo, Parcialmente cocinado, Completamente cocinado)
            6. Indica si es seguro consumirlo en su nivel actual de cocci√≥n
            """
            
            prompt_text += """
            Responde SOLO con un objeto JSON con el siguiente formato (sin texto adicional):
            [
              {
                "alimento": "nombre_del_alimento",
                "estado": "Excelente/Bueno/Regular/Deteriorado",
                "detalles": "descripci√≥n_detallada_visual",
                "confianza": valor_entre_0_y_1,
                "recomendaciones": "recomendaci√≥n_sobre_consumo"
            """
            
            # A√±adir campos adicionales para el nivel de cocci√≥n
            if cooking_status:
                prompt_text += """,
                "nivel_coccion": "Crudo/Parcialmente cocinado/Completamente cocinado",
                "seguro_consumo": true/false,
                "tiempo_coccion_recomendado": "tiempo adicional recomendado (solo si aplica)"
            """
            
            prompt_text += """
              },
              ...
            ]"""
            
            # Crear mensaje para Gemini
            food_condition_msg = ChatMessage(
                role=MessageRole.USER,
                blocks=[
                    TextBlock(text=prompt_text),
                    ImageBlock(path=temp_filename, image_mimetype="image/jpeg"),
                ],
            )
            
            # Obtener respuesta de Gemini
            condition_response = gemini_pro.chat(messages=[food_condition_msg])
            
            # Procesar respuesta
            condition_text = condition_response.message.content
            
            # Verificar si es texto JSON y extraerlo
            json_match = re.search(r'(\[.*\])', condition_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(1)
                # Parsear JSON
                estado_alimentos_real = json.loads(json_str)
                
                # Verificar que tiene la estructura correcta
                if isinstance(estado_alimentos_real, list) and len(estado_alimentos_real) > 0:
                    # Mostrar resultados reales
                    st.success(f"Se ha analizado el estado de {len(estado_alimentos_real)} alimentos")
                    
                    for item in estado_alimentos_real:
                        # Determinar color seg√∫n estado
                        if item["estado"] == "Excelente":
                            color = "#4CAF50"  # Verde
                            icon = "‚úÖ"
                            safety_level = "Alto"
                        elif item["estado"] == "Bueno":
                            color = "#8BC34A"  # Verde claro
                            icon = "‚úì"
                            safety_level = "Alto"
                        elif item["estado"] == "Regular":
                            color = "#FFC107"  # Amarillo
                            icon = "‚ö†Ô∏è"
                            safety_level = "Medio"
                        elif item["estado"] == "Deteriorado":
                            color = "#F44336"  # Rojo
                            icon = "‚ùå"
                            safety_level = "Bajo"
                        else:
                            color = "#9E9E9E"  # Gris
                            icon = "‚ùì"
                            safety_level = "Desconocido"
                        
                        # Crear una tarjeta informativa moderna
                        col1, col2 = st.columns([1, 2])
                        
                        with col1:
                            # Panel de resumen
                            cooking_status_html = ""
                            if cooking_status and "nivel_coccion" in item:
                                # Determinar color para nivel de cocci√≥n
                                if item["nivel_coccion"] == "Crudo":
                                    cooking_color = "#F44336"  # Rojo
                                    cooking_icon = "ü•©"
                                elif item["nivel_coccion"] == "Parcialmente cocinado":
                                    cooking_color = "#FF9800"  # Naranja
                                    cooking_icon = "üî•"
                                else:  # Completamente cocinado
                                    cooking_color = "#4CAF50"  # Verde
                                    cooking_icon = "üë®‚Äçüç≥"
                                
                                # Mostrar seguridad de consumo
                                safe_text = "Seguro para consumo" if item.get("seguro_consumo", False) else "No seguro para consumo"
                                safe_color = "#4CAF50" if item.get("seguro_consumo", False) else "#F44336"
                                
                                cooking_status_html = f"""
                                <div style="margin-top: 15px; padding: 12px; border-radius: 8px; background-color: #f8f9fa; border: 1px solid {cooking_color};">
                                    <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                        <span style="font-size: 1.5em; margin-right: 8px;">{cooking_icon}</span>
                                        <span style="font-weight: 600; color: {cooking_color};">{item["nivel_coccion"]}</span>
                                    </div>
                                    <div style="margin-top: 5px; padding: 5px 10px; background-color: {safe_color}; color: white; border-radius: 20px; text-align: center; font-size: 0.85em;">
                                        {safe_text}
                                    </div>
                                </div>
                                """
                                
                                if "tiempo_coccion_recomendado" in item and item["nivel_coccion"] != "Completamente cocinado":
                                    cooking_status_html += f"""
                                    <div style="margin-top: 10px; padding: 8px; background-color: #fff8e1; border-radius: 5px; font-size: 0.9em;">
                                        <strong>Tiempo adicional:</strong> {item["tiempo_coccion_recomendado"]}
                                    </div>
                                    """
                            
                            st.markdown(f"""
                            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid {color};">
                                <h2 style="color: #2c3e50; margin-bottom: 10px;">{item['alimento']}</h2>
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                    <div style="background-color: {color}; color: white; border-radius: 20px; padding: 8px 16px; display: inline-block; font-weight: bold; font-size: 1.2em;">
                                        {item['estado']}
                                    </div>
                                    <div style="font-size: 2em; margin-left: 10px;">
                                        {icon}
                                    </div>
                                </div>
                                <p style="margin-top: 10px; font-weight: 500;">Nivel de seguridad: <span style="color: {color}; font-weight: 600;">{safety_level}</span></p>
                                <p style="margin-top: 10px; font-weight: 500;">Confianza: <span style="color: #3498db; font-weight: 600;">{int(float(item['confianza'])*100)}%</span></p>
                                {cooking_status_html}
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # A√±adir bot√≥n para instrucciones espec√≠ficas
                            if st.button(f"üìã Ver gu√≠a para {item['alimento']}", key=f"guide_{item['alimento']}"):
                                st.info(f"Mostrando informaci√≥n detallada para {item['alimento']}...")
                        
                        with col2:
                            # Crear pesta√±as para informaci√≥n detallada
                            condition_tabs = st.tabs(["üìù Detalles", "üîç An√°lisis", "üõü Recomendaciones"])
                            
                            with condition_tabs[0]:
                                st.markdown(f"""
                                <h4 style="color: #2c3e50; border-bottom: 2px solid {color}; padding-bottom: 8px;">Detalles Observados</h4>
                                <p style="background-color: #f2f2f2; padding: 15px; border-radius: 8px; line-height: 1.6;">
                                    {item['detalles']}
                                </p>
                                """, unsafe_allow_html=True)
                            
                            with condition_tabs[1]:
                                st.markdown(f"""
                                <h4 style="color: #2c3e50; border-bottom: 2px solid {color}; padding-bottom: 8px;">An√°lisis Detallado</h4>
                                """, unsafe_allow_html=True)
                                
                                # Mostrar informaci√≥n de an√°lisis basada en el estado
                                if cooking_status and "nivel_coccion" in item:
                                    cooking_level = item["nivel_coccion"]
                                    
                                    if cooking_level == "Crudo":
                                        st.warning("‚ö†Ô∏è Este alimento est√° crudo y puede requerir cocci√≥n para consumo seguro.")
                                        
                                        # Informaci√≥n espec√≠fica basada en el tipo de alimento
                                        food_type = item['alimento'].lower()
                                        if any(meat in food_type for meat in ["pollo", "pavo", "ave"]):
                                            st.markdown("""
                                            **Recomendaciones para aves:**
                                            - Cocinar hasta que la temperatura interna alcance 74¬∞C (165¬∞F)
                                            - Verificar que no haya partes rosadas en el centro
                                            - Evitar la contaminaci√≥n cruzada limpiando superficies y utensilios
                                            """)
                                        elif any(meat in food_type for meat in ["res", "ternera", "steak", "filete"]):
                                            st.markdown("""
                                            **Recomendaciones para carne de res:**
                                            - Temperatura m√≠nima recomendada: 63¬∞C (145¬∞F) con 3 minutos de reposo
                                            - Niveles de cocci√≥n:
                                              - Poco hecho: 55-60¬∞C (130-140¬∞F)
                                              - T√©rmino medio: 60-65¬∞C (140-150¬∞F)
                                              - Bien cocido: +71¬∞C (+160¬∞F)
                                            """)
                                        elif any(fish in food_type for fish in ["pescado", "at√∫n", "salm√≥n", "pez"]):
                                            st.markdown("""
                                            **Recomendaciones para pescado:**
                                            - Cocinar hasta 63¬∞C (145¬∞F) o hasta que la carne est√© opaca y se separe f√°cilmente
                                            - Si desea consumirlo crudo, aseg√∫rese de que sea apto para consumo crudo y haya sido previamente congelado para eliminar par√°sitos
                                            """)
                                        else:
                                            st.markdown("""
                                            **Recomendaciones generales:**
                                            - Cocinar completamente antes de consumir
                                            - Seguir las instrucciones espec√≠ficas para este tipo de alimento
                                            """)
                                    
                                    elif cooking_level == "Parcialmente cocinado":
                                        st.warning("‚ö†Ô∏è Este alimento est√° parcialmente cocinado y puede requerir cocci√≥n adicional.")
                                        
                                        if "tiempo_coccion_recomendado" in item:
                                            st.info(f"**Tiempo de cocci√≥n adicional recomendado**: {item['tiempo_coccion_recomendado']}")
                                        
                                        st.markdown("""
                                        **Pasos recomendados:**
                                        1. Continuar la cocci√≥n hasta alcanzar la temperatura interna segura
                                        2. Verificar el centro del alimento para asegurarse de que est√© completamente cocinado
                                        3. Utilizar un term√≥metro de cocina para mayor precisi√≥n
                                        """)
                                    
                                    else:  # Completamente cocinado
                                        st.success("‚úÖ Este alimento est√° completamente cocinado y listo para consumir.")
                                        
                                        st.markdown("""
                                        **Recomendaciones:**
                                        - Mantener caliente (por encima de 60¬∞C/140¬∞F) si no se va a consumir inmediatamente
                                        - Refrigerar dentro de las 2 horas de cocci√≥n si se va a almacenar
                                        - Consumir refrigerado dentro de los siguientes 3-4 d√≠as
                                        """)
                            
                            with condition_tabs[2]:
                                st.markdown(f"<h4 style='color: #2c3e50; border-bottom: 2px solid {color}; padding-bottom: 8px;'>Recomendaciones</h4>", unsafe_allow_html=True)
                                st.write(item['recomendaciones'])
                                
                                # A√±adir recomendaciones adicionales basadas en el estado
                                st.markdown("#### Acciones recomendadas")
                                
                                actions = []
                                if item["estado"] == "Excelente":
                                    actions = [
                                        "‚úÖ Consumir con confianza",
                                        "‚úÖ Almacenar adecuadamente para mantener frescura",
                                        "‚úÖ Ideal para todas las preparaciones"
                                    ]
                                elif item["estado"] == "Bueno":
                                    actions = [
                                        "‚úÖ Apto para consumo",
                                        "‚úÖ Consumir preferentemente pronto",
                                        "‚ö†Ô∏è Verificar que mantenga buen aspecto durante la preparaci√≥n"
                                    ]
                                elif item["estado"] == "Regular":
                                    actions = [
                                        "‚ö†Ô∏è Consumir con precauci√≥n",
                                        "‚ö†Ô∏è Cocinar completamente antes de consumir",
                                        "‚ö†Ô∏è Desechar partes que muestren signos de deterioro",
                                        "‚ö†Ô∏è No recomendado para personas con sistema inmunol√≥gico comprometido"
                                    ]
                                elif item["estado"] == "Deteriorado":
                                    actions = [
                                        "‚ùå No recomendado para consumo",
                                        "‚ùå Desechar adecuadamente",
                                        "‚ùå Riesgo de intoxicaci√≥n alimentaria"
                                    ]
                                
                                for action in actions:
                                    st.markdown(f"- {action}")
                        
                        # L√≠nea divisoria entre elementos
                        st.markdown("<hr>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error al analizar el estado del alimento con IA: {str(e)}")